"use strict";(self.webpackChunkflasher=self.webpackChunkflasher||[]).push([[762],{345:(t,e,r)=>{r.d(e,{W:()=>s,l:()=>i});class i extends Error{}class s extends i{}},2180:(t,e,r)=>{r.d(e,{F:()=>n,Z:()=>a});var i=r(7973),s=r(905);class n{static INIT_SEQ={CRSF:[236,4,50,this.ord("b"),this.ord("l")],GHST:[137,4,50,this.ord("b"),this.ord("l")]};static BIND_SEQ={CRSF:[236,4,50,this.ord("b"),this.ord("d")],GHST:[137,4,50,this.ord("b"),this.ord("d")]};static ord(t){return t.charCodeAt(0)}static calc_crc8(t,e=213){let r=0;for(let i=0;i<t.byteLength;i++){r^=t[i];for(let t=0;t<8;++t)r=0!=(128&r)?(r<<1^e)%256:(r<<1)%256}return r}static get_telemetry_seq(t,e=null){const r=new Uint8Array(t);let i=new Uint8Array;if(null!=e){const t=e.length;i=new Uint8Array(t);for(let r=0;r<t;r++)i[r]=e.charCodeAt(r)}const s=new Uint8Array(r.byteLength+i.byteLength+1);s.set(r,0),s.set([r[1]+i.byteLength],1),s.set(i,r.byteLength);const n=this.calc_crc8(s.slice(2,s.byteLength-1));return s.set([n],r.byteLength+i.byteLength),s}static get_init_seq(t,e=null){return this.get_telemetry_seq(this.INIT_SEQ[t],e)}static get_bind_seq(t,e=null){return this.get_telemetry_seq(this.BIND_SEQ[t],e)}}class a{constructor(t,e,r,i,s=!1,n=!1){this.transport=t,this.terminal=e,this.flash_target=r,this.baudrate=i,this.half_duplex=s,this.uploadforce=n}_validate_serialrx=(t,e)=>this.transport.write_string("get "+t+"\r\n").then((t=>this.transport.read_line({timeout:100}))).then((t=>{console.log(t);for(const r of e)if(-1!==t.trim().indexOf(" = "+r))return console.log("found"),!0;return console.log("NOT found"),!1}));_sleep(t){return new Promise((e=>setTimeout(e,t)))}log(t){this.terminal.writeln(t)}edgeTX=()=>{this.log("======== PASSTHROUGH INIT ========");const t=(t,e,r)=>this.transport.write_string(t).then((t=>this.transport.read_line({timeout:100}))).then((t=>{if(-1===t.indexOf(e))throw new s.n("Failed Passthrough Initialisation",`Wanted '${e}', but not found in response '${t}'`)})).then((t=>this._sleep(r)));return this.transport.set_delimiters(["> "]),t("set pulses 0\n","set: ",500).then((e=>t("set rfmod 0 power off\n","set: ",500))).then((e=>t("set rfmod 0 bootpin 1\n","set: ",100))).then((e=>t("set rfmod 0 power on\n","set: ",100))).then((e=>t("set rfmod 0 bootpin 0\n","set: ",0))).then((t=>{this.log("Enabling serial passthrough..."),this.transport.set_delimiters(["\n"]);const e="serialpassthrough rfmod 0 "+this.transport.baudrate.toString();return this.log(`  CMD: '${e}`),this.transport.write_string(e+"\n").then((t=>this.transport.read_line({timeout:200})))})).then((t=>this.log("======== PASSTHROUGH DONE ========"))).catch((t=>(this.log(t.message),this.log("======== PASSTHROUGH FAILED ========"),Promise.reject(t))))};betaflight=()=>(this.log("======== PASSTHROUGH INIT ========"),this.transport.write_string("#\r\n").then((t=>(this.transport.set_delimiters(["# ","CCC"]),this.transport.read_line({timeout:200})))).then((t=>{if(-1!==t.indexOf("CCC"))return void this.log("Passthrough already enabled and bootloader active");if(!t.trim().endsWith("#"))return void this.log("No CLI available. Already in passthrough mode?, If this fails reboot FC and try again!");this.transport.set_delimiters(["# "]);let e=[];e=this.half_duplex?["GHST"]:["CRSF","ELRS"];const r=[];return this._validate_serialrx("serialrx_provider",e).then((t=>{t||r.push("Serial Receiver Protocol is not set to CRSF! Hint: set serialrx_provider = CRSF")})).then((t=>this._validate_serialrx("serialrx_inverted",["OFF"]))).then((t=>{t||r.push("Serial Receiver UART is inverted! Hint: set serialrx_inverted = OFF")})).then((t=>this._validate_serialrx("serialrx_halfduplex",["OFF","AUTO"]))).then((t=>{t||r.push("Serial Receiver UART is not in full duplex! Hint: set serialrx_halfduplex = OFF")})).then((t=>this._validate_serialrx("rx_spi_protocol",["EXPRESSLRS"]))).then((t=>{t&&r.push("ExpressLRS SPI RX detected\n\nUpdate via betaflight to flash your RX\nhttps://www.expresslrs.org/2.0/hardware/spi-receivers/")})).then((t=>{if(r.length>0){let t="";this.log("[ERROR] Invalid serial RX configuration detected:\n");for(const e of r)this.log("    !!! "+e+" !!!"),t+=e+"\n";throw this.log("\n    Please change the configuration and try again!"),new s.n("Invalid serial RX configuration detected",t)}})).then((t=>(this.log("\nAttempting to detect FC UART configuration..."),this.transport.write_string("serial\r\n")))).then((async t=>{this.transport.set_delimiters(["\n"]);let e=!1;for(;;){const t=await this.transport.read_line({timeout:200});if(""===t)break;if(t.startsWith("serial")){const r=/serial (?<port>[0-9]+) 64 /,i=t.match(r);if(i&&i.groups&&i.groups.port){e=i.groups.port;break}}}if(!e)throw this.log("!!! RX Serial not found !!!!\n  Check configuration and try again..."),new s.n("Serial RX not found","Check flight controller RX configuration");return e})).then((t=>this.transport.write_string(`serialpassthrough ${t} ${this.transport.baudrate}\r\n`))).then((t=>this._sleep(200))).then((async t=>{try{for(let t=0;t<10;t++)await this.transport.read_line({timeout:200})}catch(t){}this.log("======== PASSTHROUGH DONE ========")}))})));reset_to_bootloader=()=>{let t;if(this.log("======== RESET TO BOOTLOADER ========"),this.half_duplex)this.log("Using half duplex (GHST)"),t=this.transport.write_array(n.get_init_seq("GHST"));else{this.log("Using full duplex (CRSF)");const e=new Uint8Array(32);e.fill(85),t=this.transport.write_array(new Uint8Array([7,7,18,32])).then((t=>this.transport.write_array(e))).then((t=>this._sleep(200))).then((t=>this.transport.rawRead({timeout:1}))).catch((t=>{})).then((t=>this.transport.write_array(n.get_init_seq("CRSF")))).then((t=>this._sleep(200)))}return t.then((t=>(this.transport.set_delimiters(["\n"]),this.transport.read_line({timeout:200})))).then((t=>t.trim())).then((t=>(console.log("got string "+t),t))).then((async t=>{if(console.log("rxtarget "+t),""===t)this.log("Cannot detect RX target, blindly flashing!");else if(this.uploadforce)this.log(`Force flashing ${this.flash_target}, detected ${t}`);else if(t.toUpperCase()!==this.flash_target.toUpperCase()){if("confirm"!==await(0,i.Q)({type:"question",title:"Targets Mismatch",message:`Wrong target selected your RX is '${t}', trying to flash '${this.flash_target}'`,confirmText:"Flash anyway",cancelText:"Cancel"}))throw this.log(`Wrong target selected your RX is '${t}', trying to flash '${this.flash_target}'`),new s.P}else""!==this.flash_target&&this.log(`Verified RX target '${this.flash_target}'`);return this.log("======== BOOTLOADER ENGAGED ========"),this._sleep(500)}))}}},734:(t,e,r)=>{r.d(e,{M:()=>s});var i=r(345);class s extends class{constructor(t,e=!1){this.device=t,this.tracing=e,this.slip_reader_enabled=!1,this.left_over=new Uint8Array(0)}hexdump(t){t=String.fromCharCode.apply(String,[].slice.call(t));const e=[],r="0123456789ABCDEF";for(let i=0;i<t.length;i+=16){const s=t.slice(i,Math.min(i+16,t.length)),n=("0000"+i.toString(16)).slice(-4);let a=s.split("").map((function(t){let e=t.charCodeAt(0);return" "+r[(240&e)>>4]+r[15&e]})).join("");a+="   ".repeat(16-s.length);let o=s.replace(/[\x00-\x1F\x20]/g,".");o+=" ".repeat(16-s.length),e.push(n+" "+a+"  "+o)}return e.join("\n")}get_info(){const t=this.device.getInfo();return"WebSerial VendorID 0x"+t.usbVendorId.toString(16)+" ProductID 0x"+t.usbProductId.toString(16)}slip_writer(t){var e=0,r=0,i=0;for(r=0;r<t.length;r++)192!==t[r]&&219!==t[r]||e++;var s=new Uint8Array(2+e+t.length);for(s[0]=192,i=1,r=0;r<t.length;r++,i++)192!==t[r]?219!==t[r]?s[i]=t[r]:(s[i++]=219,s[i]=221):(s[i++]=219,s[i]=220);return s[i]=192,s}write=async t=>{const e=this.device.writable.getWriter();var r=this.slip_writer(t);this.tracing&&(console.log("Write bytes"),console.log(this.hexdump(r))),await e.write(r.buffer),e.releaseLock()};_appendBuffer(t,e){var r=new Uint8Array(t.byteLength+e.byteLength);return r.set(new Uint8Array(t),0),r.set(new Uint8Array(e),t.byteLength),r.buffer}slip_reader(t){for(var e=0,r=0,i=0,s="init";e<t.length;)if("init"!==s||192!=t[e]){if("valid_data"===s&&192==t[e]){i=e-1,s="packet_complete";break}e++}else r=e+1,s="valid_data",e++;if("packet_complete"!==s)return this.left_over=t,new Uint8Array(0);this.left_over=t.slice(i+2);var n=new Uint8Array(i-r+1),a=0;for(e=r;e<=i;e++,a++)219!==t[e]||220!==t[e+1]?219!==t[e]||221!==t[e+1]?n[a]=t[e]:(n[a]=219,e++):(n[a]=192,e++);return n.slice(0,a)}read=async({timeout:t=0,min_data:e=12}={})=>{let r;console.log("Read with timeout "+t);let s=this.left_over;if(this.left_over=new Uint8Array(0),this.slip_reader_enabled){const t=this.slip_reader(s);if(t.length>0)return t;s=this.left_over,this.left_over=new Uint8Array(0)}const n=this.device.readable.getReader();try{t>0&&(r=setTimeout((function(){n.cancel()}),t));do{const{value:t,done:e}=await n.read();if(e)throw this.left_over=s,new i.W("Timeout");s=new Uint8Array(this._appendBuffer(s.buffer,t.buffer))}while(s.length<e)}finally{t>0&&clearTimeout(r),n.releaseLock()}if(this.tracing&&(console.log("Read bytes"),console.log(this.hexdump(s))),this.slip_reader_enabled){const t=this.slip_reader(s);return this.tracing&&(console.log("Read results"),console.log(this.hexdump(t))),t}return s};rawRead=async({timeout:t=0}={})=>{if(0!=this.left_over.length){const t=this.left_over;return this.left_over=new Uint8Array(0),t}const e=this.device.readable.getReader();let r;try{t>0&&(r=setTimeout((function(){e.cancel()}),t));const{value:s,done:n}=await e.read();if(n)throw new i.W("Timeout");return this.tracing&&(console.log("Read bytes"),console.log(s)),s}finally{t>0&&clearTimeout(r),e.releaseLock()}};setRTS=async t=>{await this.device.setSignals({requestToSend:t})};setDTR=async t=>{await this.device.setSignals({dataTerminalReady:t})};connect=async({baud:t=115200}={})=>{await this.device.open({baudRate:t}),this.baudrate=t,this.left_over=new Uint8Array(0)};disconnect=async()=>{await this.device.close()}}{ui8ToBstr(t){let e="";for(let r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e}bstrToUi8(t){const e=t.length,r=new Uint8Array(e);for(let i=0;i<e;i++)r[i]=t.charCodeAt(i);return r}set_delimiters(t=["\n","CCC"]){this.delimiters=[];for(const e of t)this.delimiters.push(this.bstrToUi8(e))}read_line=async({timeout:t=0}={})=>{let e;console.log("Read with timeout "+t);let r=this.left_over;this.left_over=new Uint8Array;const i=this.delimiters;function s(t){const e=t.findIndex(((t,e,r)=>{for(const t of i)if(t.every(((t,i)=>r[e+i]===t)))return!0;return!1}));if(-1!==e)for(const r of i)if(r.every(((r,i)=>t[e+i]===r)))return e+r.length;return-1}let n=s(r);if(-1===n){const i=this.device.readable.getReader();try{t>0&&(e=setTimeout((function(){i.cancel()}),t));do{const{value:t,done:e}=await i.read();if(e)return i.releaseLock(),await this.device.close(),await this.device.open({baudRate:this.baudrate}),"";r=new Uint8Array(this._appendBuffer(r.buffer,t.buffer)),n=s(r)}while(-1===n);i.releaseLock()}finally{t>0&&clearTimeout(e)}}return this.left_over=r.slice(n),r=r.slice(0,n),this.tracing&&(console.log("Read bytes"),console.log(this.hexdump(r))),this.ui8ToBstr(r)};write_string=async t=>{const e=this.device.writable.getWriter(),r=this.bstrToUi8(t);this.tracing&&(console.log("Write bytes"),console.log(this.hexdump(r))),await e.write(r.buffer),e.releaseLock()};write_array=async t=>{const e=this.device.writable.getWriter();this.tracing&&(console.log("Write bytes"),console.log(this.hexdump(t))),await e.write(t.buffer),e.releaseLock()}}}}]);